name: Go Test and Release

on:
  push:
  pull_request:   # Trigger on any pull request

jobs:
  # Job 1: Run Go Tests (Shared by all triggers)
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'  # Set this to the version of Go you are using

      # Step 3: Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install dependencies (go mod tidy ensures modules are correct)
      - name: Install dependencies
        run: go mod tidy

      # Step 5: Run Go tests
      - name: Run tests
        run: go test -v ./...

  # Job 2: Build and Release (only if tests pass and a tag is pushed)
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test  # This ensures Job 2 only runs if Job 1 (test) succeeds
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')  # Only run for tag pushes

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      # Step 3: Compile the binary for Linux AMD64
      - name: Build for Linux AMD64
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -o dist/autopuller-go ./cmd

      # Step 4: Create a release and upload the binary
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}  # This is the tag that triggered the workflow
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/autopuller-go
